import{_ as n,o as s,c as a,a as t}from"./app-I-dmI9S2.js";const p={},o=t(`<h1 id="lerna" tabindex="-1"><a class="header-anchor" href="#lerna" aria-hidden="true">#</a> lerna</h1><p>解决原生脚手架开发</p><ul><li>多package本地link</li><li>多package依赖安装</li><li>多package单元测试</li><li>多package代码提交</li><li>多package代码发布</li><li>发布时版本一致性</li><li>发布后互相依赖 基于git + npm的多packages项目管理工具，大幅减少重复操作，提升操作标准化</li></ul><h2 id="lerna开发脚手架" tabindex="-1"><a class="header-anchor" href="#lerna开发脚手架" aria-hidden="true">#</a> lerna开发脚手架</h2><p>项目初始化： 初始化npm -&gt; 安装leran -&gt; leran初始化项目</p><h2 id="learn源码分析" tabindex="-1"><a class="header-anchor" href="#learn源码分析" aria-hidden="true">#</a> learn源码分析</h2><ul><li>首先找到入口文件</li><li>本地debug 根据bin去找到入口文件</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;lerna&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/cli.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>require(&quot;.&quot;)</code>等价<code>require(&quot;./index.js&quot;)</code> yargs库快速开发脚手架</p><h2 id="lerna源码目录" tabindex="-1"><a class="header-anchor" href="#lerna源码目录" aria-hidden="true">#</a> lerna源码目录</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">D</span><span class="token operator">:</span>\\lerna<span class="token operator">-</span>main
├── <span class="token constant">CHANGELOG</span><span class="token punctuation">.</span>md
├── <span class="token constant">CODE_OF_CONDUCT</span><span class="token punctuation">.</span>md
├── commands
├── <span class="token constant">CONTRIBUTING</span><span class="token punctuation">.</span>md
├── core
    ├── child<span class="token operator">-</span>process
    ├── cli
    ├── command
    ├── conventional<span class="token operator">-</span>commits
    ├── filter<span class="token operator">-</span>options
    ├── global<span class="token operator">-</span>options
    ├── lerna
    ├── otplease
    ├── <span class="token keyword">package</span>
    ├── <span class="token keyword">package</span><span class="token operator">-</span>graph
    ├── project
    ├── prompt
    └── validation<span class="token operator">-</span>error    
├── doc
├── <span class="token constant">FAQ</span><span class="token punctuation">.</span>md
├── helpers
├── integration
├── jest<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js
├── jest<span class="token punctuation">.</span>integration<span class="token punctuation">.</span>js
├── lerna<span class="token punctuation">.</span>json
├── <span class="token constant">LICENSE</span>
├── node_modules
├── <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json
├── <span class="token keyword">package</span><span class="token punctuation">.</span>json
├── <span class="token constant">README</span><span class="token punctuation">.</span>md
├── scripts
├── setup<span class="token operator">-</span>integration<span class="token operator">-</span>timeout<span class="token punctuation">.</span>js
├── setup<span class="token operator">-</span>unit<span class="token operator">-</span>test<span class="token operator">-</span>timeout<span class="token punctuation">.</span>js
├── utils
└── __fixtures__
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="入口文件" tabindex="-1"><a class="header-anchor" href="#入口文件" aria-hidden="true">#</a> 入口文件</h2><p>可以在根目录的 package.json 文件中发现脚手架的入口 <code>json &quot;bin&quot;: { &quot;lerna&quot;: &quot;core/lerna/cli.js&quot; } </code></p><h2 id="初始化分析" tabindex="-1"><a class="header-anchor" href="#初始化分析" aria-hidden="true">#</a> 初始化分析</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// core\\lerna\\cli.js</span>

<span class="token comment">// 引入 import-local 这个库</span>
<span class="token keyword">const</span> importLocal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;import-local&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// import-local 的逻辑后面单独分析</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;npmlog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;cli&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;using local version of lerna&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token comment">// 引入当前目录下的index.js模块 这个模块返回了一个 main 方法 并把 process.argv.slice(2) 作为参数执行</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  相当于 main(process.argv.slice(2))</span>
<span class="token punctuation">}</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
根据入口文件，发现 Lerna 初始化的时候执行了 main 方法。
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>js
<span class="token comment">// core\\lerna\\index.js</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//</span>
<span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/cli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入若干指令</span>
<span class="token keyword">const</span> addCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/add/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bootstrapCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/bootstrap/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> changedCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/changed/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cleanCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/clean/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> createCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/create/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> diffCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/diff/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> execCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/exec/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> importCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/import/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> infoCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/info/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> initCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/init/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> linkCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/link/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> listCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/list/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> publishCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/publish/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> runCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/run/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> versionCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/version/command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入 package.json 模块</span>
<span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./package.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 main 方法</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> main<span class="token punctuation">;</span>

<span class="token comment">// main 方法</span>
<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义一个对象，里面保存一个 lernaVersion 属性，值是 package.json 中的 version 属性的值</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">lernaVersion</span><span class="token operator">:</span> pkg<span class="token punctuation">.</span>version<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>addCmd<span class="token punctuation">)</span>    <span class="token comment">// 添加 addCmd 命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>bootstrapCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>changedCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>cleanCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>createCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>diffCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>execCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>importCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>infoCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>initCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>linkCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>listCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>publishCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>runCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>versionCmd<span class="token punctuation">)</span> <span class="token comment">// 添加命令</span>
    <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 合并参数 , 将 argv 和自定义的 context 中的属性合并到 argv 中</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main 首先是执行了 cli 这个方法。cli 这个模块输出的是 lernaCLI 方法。 接下来看cli方法做了什么</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// core\\cli\\index.js</span>
<span class="token comment">// lernaCLI 方法</span>
<span class="token keyword">function</span> <span class="token function">lernaCLI</span><span class="token punctuation">(</span><span class="token parameter">argv<span class="token punctuation">,</span> cwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对 yargs 进行初始化  </span>
  <span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">yargs</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// globalOptions 也是一个方法 把 yargs 作为参数传入 返回的还是这个 yargs 对象 </span>
  <span class="token comment">// 然后基于 globalOptions() 的结果 又做了一些设置</span>
  <span class="token comment">// 运用的是构造者模式，对一个对象调用方法，然后返回这个对象本身</span>
  <span class="token keyword">return</span> <span class="token function">globalOptions</span><span class="token punctuation">(</span>cli<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: $0 &lt;command&gt; [options]&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 配置 cli 的开始内容  $0 表示再 argv 中寻找 $0 这个值进行替换</span>
    <span class="token punctuation">.</span><span class="token function">demandCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;A command is required. Pass --help to see all available commands and options.&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 配置输入的最小命令</span>
    <span class="token punctuation">.</span><span class="token function">recommendCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 配置 command 的与错误最相近的 command 提示</span>
    <span class="token punctuation">.</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启严格模式 命令不存在时 会报错</span>
    <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 命令不存在时的错误定制</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 别名</span>
    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;v&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 别名</span>
    <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>cli<span class="token punctuation">.</span><span class="token function">terminalWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 配置cli的宽度和命令行一样</span>
    <span class="token punctuation">.</span><span class="token function">epilogue</span><span class="token punctuation">(</span>dedent<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> 
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置 cli 结尾的内容</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链式调用globaloptions</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// core\\global-options\\index.js</span>
<span class="token keyword">function</span> <span class="token function">globalOptions</span><span class="token punctuation">(</span><span class="token parameter">yargs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义了一堆的 option</span>
  <span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loglevel</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">defaultDescription</span><span class="token operator">:</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">describe</span><span class="token operator">:</span> <span class="token string">&quot;What level of logs to report.&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">concurrency</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">defaultDescription</span><span class="token operator">:</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>
      <span class="token literal-property property">describe</span><span class="token operator">:</span> <span class="token string">&quot;How many processes to use when lerna parallelizes tasks.&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">requiresArg</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;reject-cycles&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">describe</span><span class="token operator">:</span> <span class="token string">&quot;Fail if a cycle is detected among dependencies.&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;no-progress&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">describe</span><span class="token operator">:</span> <span class="token string">&quot;Disable progress bars. (Always off in CI)&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">progress</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// proxy for --no-progress</span>
      <span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;no-sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">describe</span><span class="token operator">:</span> <span class="token string">&quot;Do not sort packages topologically (dependencies before dependents).&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// proxy for --no-sort</span>
      <span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;max-buffer&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">describe</span><span class="token operator">:</span> <span class="token string">&quot;Set max-buffer (in bytes) for subcommand execution&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">requiresArg</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 拿到这些 option 的名称</span>
  <span class="token keyword">const</span> globalKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;version&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> yargs
  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token comment">// 给 yargs 添加 全局options </span>
  <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>globalKeys<span class="token punctuation">,</span> <span class="token string">&quot;Global Options:&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 对 options 进行分组</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;ci&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">// 添加了一个隐藏的 option </span>
    <span class="token literal-property property">hidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="command的执行过程" tabindex="-1"><a class="header-anchor" href="#command的执行过程" aria-hidden="true">#</a> command的执行过程</h2><p>前面提到 main 方法当中添加了很多 command，再来看看 Command 执行过程是什么样的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// commands\\list\\command.js</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> filterOptions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/filter-options&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> listable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@lerna/listable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>command <span class="token operator">=</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 配置命令的名称</span>

exports<span class="token punctuation">.</span>aliases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;la&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ll&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 配置命令的别名</span>

exports<span class="token punctuation">.</span>describe <span class="token operator">=</span> <span class="token string">&quot;List local packages&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 配置命令的描述</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">builder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">yargs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 配置命令在执行之前做的事情</span>
  listable<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>yargs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">filterOptions</span><span class="token punctuation">(</span>yargs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 配置命令在执行过程做的事情</span>
  <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用当前目录下 index.js 导出的 factory 方法</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续看handler的实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// commands\\list\\index.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> factory<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListCommand</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化一个 ListCommand</span>
<span class="token punctuation">}</span>

<span class="token comment">// ListCommand 的结构</span>
<span class="token keyword">class</span> <span class="token class-name">ListCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">requiresGit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>ListCommand <span class="token operator">=</span> ListCommand<span class="token punctuation">;</span>

<span class="token comment">// core\\command\\index.js</span>

<span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">_argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 深拷贝 argv</span>
    <span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>_argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加 name 属性  FooCommand =&gt; foo</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Command$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加 composed 属性, 是否使用复合指令</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>composed <span class="token operator">=</span> <span class="token keyword">typeof</span> argv<span class="token punctuation">.</span>composed <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">&amp;&amp;</span> argv<span class="token punctuation">.</span>composed <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token comment">// 如果不是复合指令</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>composed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// composed commands have already logged the lerna version</span>
      log<span class="token punctuation">.</span><span class="token function">notice</span><span class="token punctuation">(</span><span class="token string">&quot;cli&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>argv<span class="token punctuation">.</span>lernaVersion<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 最终的执行过程</span>
    <span class="token keyword">let</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 定义一个微任务 chain.then 会被加入到微任务队列</span>
      <span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 会行程队列,一个接一个执行</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>project <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Project</span><span class="token punctuation">(</span>argv<span class="token punctuation">.</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runValidations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPreparations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 核心内容</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 向 argv 中定义 cwd 和 $0 两个参数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&quot;cwd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$0&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 对 argv 属性做一些处理</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;argv&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 对 runner 属性做一些处理</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;runner&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> runner<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 核心内容</span>
  <span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 调用 initialize 方法</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">proceed</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>proceed <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 execute方法</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// early exits set their own exitCode (if non-zero)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// initialize 和 execute 强制用户实现，否则会报错</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;initialize() needs to be implemented.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;execute() needs to be implemented.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>initialize 和 execute 强制用户实现，否则会报错。</p>`,25),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","lerna.html.vue"]]);export{r as default};
